/*
 * This file is generated by jOOQ.
*/
package twitch.explorer.database.jooq.db.tables.records;


import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;

import twitch.explorer.database.jooq.db.tables.NewView;


/**
 * VIEW
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NewViewRecord extends TableRecordImpl<NewViewRecord> implements Record2<Timestamp, Long> {

    private static final long serialVersionUID = -1772544893;

    /**
     * Setter for <code>twitch.new_view.max-fetched</code>.
     */
    public void setMaxFetched(Timestamp value) {
        set(0, value);
    }

    /**
     * Getter for <code>twitch.new_view.max-fetched</code>.
     */
    public Timestamp getMaxFetched() {
        return (Timestamp) get(0);
    }

    /**
     * Setter for <code>twitch.new_view.user_id</code>.
     */
    public void setUserId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>twitch.new_view.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Timestamp, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Timestamp, Long> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field1() {
        return NewView.NEW_VIEW.MAX_FETCHED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field2() {
        return NewView.NEW_VIEW.USER_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component1() {
        return getMaxFetched();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component2() {
        return getUserId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value1() {
        return getMaxFetched();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value2() {
        return getUserId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NewViewRecord value1(Timestamp value) {
        setMaxFetched(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NewViewRecord value2(Long value) {
        setUserId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NewViewRecord values(Timestamp value1, Long value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached NewViewRecord
     */
    public NewViewRecord() {
        super(NewView.NEW_VIEW);
    }

    /**
     * Create a detached, initialised NewViewRecord
     */
    public NewViewRecord(Timestamp maxFetched, Long userId) {
        super(NewView.NEW_VIEW);

        set(0, maxFetched);
        set(1, userId);
    }
}
