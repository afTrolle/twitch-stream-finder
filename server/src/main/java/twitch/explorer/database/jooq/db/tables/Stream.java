/*
 * This file is generated by jOOQ.
*/
package twitch.explorer.database.jooq.db.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import twitch.explorer.database.jooq.db.Indexes;
import twitch.explorer.database.jooq.db.Keys;
import twitch.explorer.database.jooq.db.Twitch;
import twitch.explorer.database.jooq.db.tables.records.StreamRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Stream extends TableImpl<StreamRecord> {

    private static final long serialVersionUID = 1874048137;

    /**
     * The reference instance of <code>twitch.stream</code>
     */
    public static final Stream STREAM = new Stream();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StreamRecord> getRecordType() {
        return StreamRecord.class;
    }

    /**
     * The column <code>twitch.stream.stream_id</code>.
     */
    public final TableField<StreamRecord, Integer> STREAM_ID = createField("stream_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>twitch.stream.title</code>.
     */
    public final TableField<StreamRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>twitch.stream.started</code>.
     */
    public final TableField<StreamRecord, Timestamp> STARTED = createField("started", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>twitch.stream.ended</code>.
     */
    public final TableField<StreamRecord, Timestamp> ENDED = createField("ended", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>twitch.stream.thumbnail</code>.
     */
    public final TableField<StreamRecord, String> THUMBNAIL = createField("thumbnail", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>twitch.stream.view_count</code>. latest read view count
     */
    public final TableField<StreamRecord, String> VIEW_COUNT = createField("view_count", org.jooq.impl.SQLDataType.VARCHAR(45).nullable(false), this, "latest read view count");

    /**
     * The column <code>twitch.stream.user_id</code>.
     */
    public final TableField<StreamRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>twitch.stream.game_id</code>.
     */
    public final TableField<StreamRecord, Integer> GAME_ID = createField("game_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>twitch.stream.stream_type_id</code>.
     */
    public final TableField<StreamRecord, Integer> STREAM_TYPE_ID = createField("stream_type_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>twitch.stream.language_id</code>.
     */
    public final TableField<StreamRecord, Integer> LANGUAGE_ID = createField("language_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>twitch.stream</code> table reference
     */
    public Stream() {
        this(DSL.name("stream"), null);
    }

    /**
     * Create an aliased <code>twitch.stream</code> table reference
     */
    public Stream(String alias) {
        this(DSL.name(alias), STREAM);
    }

    /**
     * Create an aliased <code>twitch.stream</code> table reference
     */
    public Stream(Name alias) {
        this(alias, STREAM);
    }

    private Stream(Name alias, Table<StreamRecord> aliased) {
        this(alias, aliased, null);
    }

    private Stream(Name alias, Table<StreamRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Twitch.TWITCH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STREAM_GAME_ID_FK_IDX, Indexes.STREAM_LANGUAGE_ID_FK_IDX, Indexes.STREAM_PRIMARY, Indexes.STREAM_STREAM_ID_UNIQUE, Indexes.STREAM_STREAM_TYPE_ID_FK_IDX, Indexes.STREAM_USER_ID_FK_a7_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<StreamRecord, Integer> getIdentity() {
        return Keys.IDENTITY_STREAM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StreamRecord> getPrimaryKey() {
        return Keys.KEY_STREAM_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StreamRecord>> getKeys() {
        return Arrays.<UniqueKey<StreamRecord>>asList(Keys.KEY_STREAM_PRIMARY, Keys.KEY_STREAM_STREAM_ID_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<StreamRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StreamRecord, ?>>asList(Keys.FK_STREAM_USER, Keys.FK_STREAM_GAME, Keys.FK_STREAM_STREAM_TYPE, Keys.FK_STREAM_LANGUAGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Stream as(String alias) {
        return new Stream(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Stream as(Name alias) {
        return new Stream(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Stream rename(String name) {
        return new Stream(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Stream rename(Name name) {
        return new Stream(name, null);
    }
}
