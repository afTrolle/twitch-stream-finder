/*
 * This file is generated by jOOQ.
*/
package twitch.explorer.database.jooq.db.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import twitch.explorer.database.jooq.db.Indexes;
import twitch.explorer.database.jooq.db.Keys;
import twitch.explorer.database.jooq.db.Twitch;
import twitch.explorer.database.jooq.db.tables.records.ClientRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Client extends TableImpl<ClientRecord> {

    private static final long serialVersionUID = -171961096;

    /**
     * The reference instance of <code>twitch.client</code>
     */
    public static final Client CLIENT = new Client();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClientRecord> getRecordType() {
        return ClientRecord.class;
    }

    /**
     * The column <code>twitch.client.client_id</code>.
     */
    public final TableField<ClientRecord, Integer> CLIENT_ID = createField("client_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>twitch.client.ip</code>.
     */
    public final TableField<ClientRecord, String> IP = createField("ip", org.jooq.impl.SQLDataType.VARCHAR(46).nullable(false), this, "");

    /**
     * The column <code>twitch.client.cookie</code>.
     */
    public final TableField<ClientRecord, String> COOKIE = createField("cookie", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>twitch.client.issued</code>.
     */
    public final TableField<ClientRecord, Timestamp> ISSUED = createField("issued", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * Create a <code>twitch.client</code> table reference
     */
    public Client() {
        this(DSL.name("client"), null);
    }

    /**
     * Create an aliased <code>twitch.client</code> table reference
     */
    public Client(String alias) {
        this(DSL.name(alias), CLIENT);
    }

    /**
     * Create an aliased <code>twitch.client</code> table reference
     */
    public Client(Name alias) {
        this(alias, CLIENT);
    }

    private Client(Name alias, Table<ClientRecord> aliased) {
        this(alias, aliased, null);
    }

    private Client(Name alias, Table<ClientRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Twitch.TWITCH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CLIENT_ID_UNIQUE, Indexes.CLIENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ClientRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CLIENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ClientRecord> getPrimaryKey() {
        return Keys.KEY_CLIENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ClientRecord>> getKeys() {
        return Arrays.<UniqueKey<ClientRecord>>asList(Keys.KEY_CLIENT_PRIMARY, Keys.KEY_CLIENT_ID_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Client as(String alias) {
        return new Client(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Client as(Name alias) {
        return new Client(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Client rename(String name) {
        return new Client(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Client rename(Name name) {
        return new Client(name, null);
    }
}
