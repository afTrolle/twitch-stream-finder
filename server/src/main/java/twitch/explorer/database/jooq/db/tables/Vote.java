/*
 * This file is generated by jOOQ.
*/
package twitch.explorer.database.jooq.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import twitch.explorer.database.jooq.db.Indexes;
import twitch.explorer.database.jooq.db.Keys;
import twitch.explorer.database.jooq.db.Twitch;
import twitch.explorer.database.jooq.db.enums.VoteState;
import twitch.explorer.database.jooq.db.tables.records.VoteRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Vote extends TableImpl<VoteRecord> {

    private static final long serialVersionUID = -1835969336;

    /**
     * The reference instance of <code>twitch.vote</code>
     */
    public static final Vote VOTE = new Vote();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VoteRecord> getRecordType() {
        return VoteRecord.class;
    }

    /**
     * The column <code>twitch.vote.client_id</code>.
     */
    public final TableField<VoteRecord, Integer> CLIENT_ID = createField("client_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>twitch.vote.user_id</code>.
     */
    public final TableField<VoteRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>twitch.vote.state</code>.
     */
    public final TableField<VoteRecord, VoteState> STATE = createField("state", org.jooq.util.mysql.MySQLDataType.VARCHAR.asEnumDataType(twitch.explorer.database.jooq.db.enums.VoteState.class), this, "");

    /**
     * Create a <code>twitch.vote</code> table reference
     */
    public Vote() {
        this(DSL.name("vote"), null);
    }

    /**
     * Create an aliased <code>twitch.vote</code> table reference
     */
    public Vote(String alias) {
        this(DSL.name(alias), VOTE);
    }

    /**
     * Create an aliased <code>twitch.vote</code> table reference
     */
    public Vote(Name alias) {
        this(alias, VOTE);
    }

    private Vote(Name alias, Table<VoteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Vote(Name alias, Table<VoteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Twitch.TWITCH;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.VOTE_FK_VOTE_CLIENT_IDX, Indexes.VOTE_USER_ID_FK_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<VoteRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VoteRecord, ?>>asList(Keys.FK_VOTE_CLIENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Vote as(String alias) {
        return new Vote(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Vote as(Name alias) {
        return new Vote(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Vote rename(String name) {
        return new Vote(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vote rename(Name name) {
        return new Vote(name, null);
    }
}
